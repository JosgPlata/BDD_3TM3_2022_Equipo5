Introducción
[1]“La arquitectura de un sistema refleja la estructura del sistema subyacente. 
Define los diferentes componentes del sistema, las funciones de estos componentes y 
las interacciones y relaciones generales entre ellos. Este concepto es válido tanto 
para los sistemas informáticos generales como para los sistemas de software.”


Arquitectura ANSI/SPARC
En la década de los 70s el comité de computación y procesamiento de información (X3) 
del ANSI estableció un grupo de estudio en sistemas de gestión de bases de datos, 
auspiciado por   el SPARC, con el propósito de establecer estándares en esa área. 
El framework arquitectónico propuesto es conocido como “arquitectura ANSI/SPARC”.
[2]“El framework de ANSI/SPARC DBMS describe un sistema gestor de bases de datos 
en términos de interfaces, roles de personal, funciones de procesamiento, y flujos 
de información dentro del sistema.”

Niveles de Representación y Descripción de datos
El framework ANSI/SPARC propone una arquitectura con “coexistencia” de tres niveles 
para DBMSs. Una versión simplificada se muestra en la siguiente imagen.
 
Hay tres vistas de datos: la vista externa, la cual es del usuario final, quien puede 
ser un programador; la vista interna, esa del sistema o maquina; y la vista conceptual, 
la de la empresa. Por cada vista se requiere definir un esquema.
En el nivel más bajo se encuentra la vista interna, la cual trata con la definición física 
y organización de los datos. En el otro extremo está la vista externa la cual se encarga de 
la forma en la que los usuarios ven la base de datos. Entre estos dos niveles está el esquema 
conceptual, el cuál es una definición abstracta de la base de datos. Esta parte es la vista del 
“mundo real” de la empresa siendo modelada en la base de datos.

Distribución
La distribución hace referencia al manejo y localización física de los datos. En la arquitectura 
cliente/servidor el servidor se encarga de los deberes del manejo de datos mientras que los clientes 
proveen aplicaciones de entorno. En el caso de la arquitectura peer-to-peer cada nodo puede 
encargarse de todas las funciones del sistema gestor de bases de datos, comunicando con otras 
máquinas consultas y transacciones.

Heterogeneidad 

El fenómeno de la heterogeneidad no es un fenómeno propio de los sistemas de bases de datos, 
sino una característica de un sistema distribuido, en este sentido, existe heterogeneidad tanto en hardware 
(Arquitectura de procesadores, cables y conectores, memorias, etc.) como en software (Tipos de datos, tamaño de datos
, Sistema operativo, acceso a memoria, set de instrucciones, etc.). 
Los aspectos heterogéneos más relevantes en el contexto de bases de datos son, 
la heterogeneidad de los lenguajes de consulta y los paradigmas de acceso a los datos, 
incluso dentro del estándar SQL existen variaciones no solo a nivel de implementación, 
sino a nivel sintáctico ya que cada implementación (MySQL, MS-SQL-SERVER,POSTGRESQL, 
entre otros dentro de un mismo gestor podemos tener diferentes mecanismos de almacenamiento de datos, 
tal es el caso de MySQL, en el que los datos se pueden almacenar mediante InnoDB, MyISAM y otros mecanismos) 
Hay que resaltar que el problema de la heterogeneidad no es un problema trivial, por ejemplo, 
¿Qué deberia suceder si de un dato tengo un float 64 y del otro lado solo soporto floats de 32 bits? 
Este es un concepto importante en el contexto de las bases de datos distribuidas, de ahí que tengamos que seleccionar
el driver correcto para poder realizar la comunicación entre servidores de bases de datos y que existan implementaciones 
diferentes, para diferentes arquitecturas y sistemas operativos. 

Sistemas Peer-to-Peer
[3]“Una arquitectura de red distribuida puede ser llamada una red peer-to-peer (P-to-P, P2P0, etc.) si 
los participantes comparten una parte de sus propios recursos de hardware (poder de procesamiento, capacidad 
de almacenamiento, capacidad de enlace de red, impresoras…). Estos recursos compartidos son necesarios para
proveer el servicio y contenido ofrecido por la red.”
En una arquitectura P2P se tiene varios módulos idénticos, que corren en diferentes computadoras. 
Los diferentes módulos almacenados en diferentes sitios se comunican entre ellos para completar los procesos 
requeridos. En esta arquitectura cada nodo puede acceder a servicios tanto como proveerlos a otros nodos. 
Estos módulos pueden ser divididos en tres capas:
capa de superposición de base: Se ocupa del problema de descubrir otros participantes en el sistema y crear 
un mecanismo para que todos los nodos se comuniquen entre sí. Se encarga de que todos los participantes en la
red estén al tanto de otros participantes.
capa de middleware: Incluye componentes de software adicional que pueden ser potencialmente rehusados por muchas
otras aplicaciones.
capa de aplicación: Provee paquetes de software para ser usados por usuarios y desarrolladores para explotar la 
naturaleza distribuida de la infraestructura p2p.


Referencias usadas:
[1] 	C. Ray, «Distributed DBMS Architecture,» de Distributed database systems, NOIDA, Dorling Kindersley, 2009, pp. 87-102.
[2] 	G. d. T. d. M. d. A. d. B. d. D. (DAFTG), «Modelo de referencia para estandarización de DBMS,» Departamento de Comercio de Estados Unidos, 1985.
[3] 	R. Schollmeier, «Una definición de redes de P2P para la clasificación de arquitecturas y aplicaciones de P2P,» de Primera Conferencia Internacional sobre Computación Peer-to-Peer, Munchen, Alemania., 2002. 
[4] 	M. Tamer Özsu y Patrick Valduriez, Principles of Distributed Database Systems, Springer, 2011. 
